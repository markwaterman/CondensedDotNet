<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Reclamation and Cleanup</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Memory" /><meta name="Microsoft.Help.Id" content="606626e5-fb28-47c5-939f-a87c14d4f99a" /><meta name="Description" content="Many implementations of interning suffer from the problem that they never clean up their pool of interned items (.NET's built-in string interning tablehttps://msdn.microsoft.com/en-us/library/system.string.intern.aspx is one example)." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Condesed Collection Library for .NET<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="a2dd277a-ec2e-4f4b-a42d-e31f23b94bdd.htm" title="Condesed Collection Library for .NET" tocid="roottoc">Condesed Collection Library for .NET</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="a2dd277a-ec2e-4f4b-a42d-e31f23b94bdd.htm" title="Welcome" tocid="a2dd277a-ec2e-4f4b-a42d-e31f23b94bdd">Welcome</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6326cb27-4108-4317-ae04-e67a8cb4738d.htm" title="Version History" tocid="6326cb27-4108-4317-ae04-e67a8cb4738d">Version History</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="12336e43-b0f4-46fb-a17b-c640871bddab.htm" title="Immutability Overview" tocid="12336e43-b0f4-46fb-a17b-c640871bddab">Immutability Overview</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="88ffb368-39bd-430b-bd09-0800d2f14dbf.htm" title="LINQ Operators" tocid="88ffb368-39bd-430b-bd09-0800d2f14dbf">LINQ Operators</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="23ce826c-4e23-4c13-9ac9-63cdccb22d86.htm" title="Cutover Overview" tocid="23ce826c-4e23-4c13-9ac9-63cdccb22d86">Cutover Overview</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="606626e5-fb28-47c5-939f-a87c14d4f99a.htm" title="Reclamation and Cleanup" tocid="606626e5-fb28-47c5-939f-a87c14d4f99a">Reclamation and Cleanup</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="4e8c0308-b111-44cc-aa69-99f3a651f306.htm" title="Equality Overview" tocid="4e8c0308-b111-44cc-aa69-99f3a651f306">Equality Overview</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="6c8df980-bdc2-46d6-b712-f2f740467dd9.htm" title="License" tocid="6c8df980-bdc2-46d6-b712-f2f740467dd9">License</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="48635bf0-eed3-4978-e228-386eea4ad6d1.htm" title="API Reference" tocid="48635bf0-eed3-4978-e228-386eea4ad6d1">API Reference</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>Reclamation and Cleanup</h1></td></tr></table><span class="introStyle"></span> <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[This is preliminary documentation and is subject to change.]</p><div class="summary"><p>
        Many implementations of interning suffer from the problem that they never clean up their pool of interned items (.NET's built-in
        <a href="https://msdn.microsoft.com/en-us/library/system.string.intern.aspx" target="_blank">string interning table</a>
        is one example). The Condensed Library addresses this problem by offering several approaches to memory reclamation.
      </p></div><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#DoNothing">Option 1: Do nothing</a></li><li class="outlineSectionEntry"><a href="#ExplicitCleanup">Option 2: Periodically call CondensedCollection.Cleanup</a></li><li class="outlineSectionEntry"><a href="#Reconstruct">Option 3: Reconstruct</a></li><li class="outlineSectionEntry"><a href="#InternedValueReclaimable">
        Option 4: Cleanup from the InternedValueReclaimable Event (Preferred)
      </a></li></ul><p>
        Depending on your workload, you can choose one of the following options to clean up unused values in a <a href="567ca794-b467-8736-0b20-caacc958e8a9.htm">CondensedCollection's</a> intern pool.
      </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p>
          Use the CondensedCollection's <a href="9f0383ee-57a3-5713-12ba-72eb2bb1ad86.htm">InternPoolCount</a> property to see the size of the intern pool--if it's larger than the <a href="53abe78c-4313-2f61-7fc8-62d60bdd7092.htm">UniqueCount</a> property then your collection's pool contains unused values that can be reclaimed.
        </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="DoNothing"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Option 1: Do nothing</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          Reasons not to worry about reclaiming items from the intern pool include:
        </p><ul><li><p>
              You never modify the contents of the collection after initial load.
            </p></li><li><p>
              The collection gets modified, but the set of unique values you put in it is small and unchanging, so you don't need to worry about the intern pool containing unused values.
            </p></li><li><p>
              The collection gets modified, but the lifetime of the collection instance (or your application) is brief, so you don't care if some extra memory is consumed by the collection's intern pool.
            </p></li></ul></div><div class="collapsibleAreaRegion" id="ExplicitCleanup"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Option 2: Periodically call CondensedCollection.Cleanup</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          The <a href="7037e78b-13c2-a89c-ca7b-212a32e64225.htm">Cleanup<span id="LSTEEFB2FC4_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTEEFB2FC4_0?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a> method rebuilds the collection's internal data structures, removing unused values and making them eligible for garbage collection. This is a relatively expensive operation, so you may only want to perform it on an infrequent, periodic basis.
        </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            The <a href="7037e78b-13c2-a89c-ca7b-212a32e64225.htm">Cleanup<span id="LSTEEFB2FC4_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTEEFB2FC4_1?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a> method has no effect on collections that have cut over to normal (non-deduplicated) list storage. Reconstruct the collection from itself to rebuild it and restart deduplication (Option 3).
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="Reconstruct"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Option 3: Reconstruct</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          If you've constructed a CondensedCollection with the ability to <a href="23ce826c-4e23-4c13-9ac9-63cdccb22d86.htm">cut over</a> to non-deduplicated storage then the Cleanup() method will not be effective if/when your collection makes the transition. To restart deduplication, you can simply reconstruct a CondensedCollection from itself for a fresh start.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID2EAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID2EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID2EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">if</span> (myCondensedColl.HasCutover)
{
    <span class="highlight-comment">// Reconstruct collection from itself to restart deduplication.</span>
    myCondensedColl = <span class="highlight-keyword">new</span> CondensedCollection&lt;<span class="highlight-keyword">string</span>&gt;(collection: myCondensedColl);
}
<span class="highlight-keyword">else</span>
{
    <span class="highlight-comment">// Do a normal cleanup:</span>
    myCondensedColl.Cleanup();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID2EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="InternedValueReclaimable"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />
        Option 4: Cleanup from the InternedValueReclaimable Event (Preferred)
      </span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          The CondensedCollection will raise the <a href="dcf7cb21-1008-3382-8e86-2238dc21499e.htm">InternedValueReclaimable</a> event 
          as soon as one of the values in its pool is no longer used. You can set the <a href="6c0420c1-d692-d094-c8c0-8a3b2b46bb3f.htm">InternReclaimableEventArgs.Cleanup</a> 
          property to true in your event handler to trigger a cleanup of the pool as soon as your handler completes.
        </p><p>
          A cleanup should <em>not</em> be performed every time this event is raised--the cleanup operation is very expensive, 
          and it causes a full reindexing of the collection's internal data structures. Only set the <a href="6c0420c1-d692-d094-c8c0-8a3b2b46bb3f.htm">InternReclaimableEventArgs.Cleanup</a> 
          property to true when the number of unused intern pool items exceeds your application's tolerances. The 
          <a href="532e41eb-9654-8c03-24f1-aa343c03639e.htm">InternReclaimableEventArgs</a> argument provides statistics about your collection to help you decide when a cleanup should be run.
        </p><p>A event handler that only performs occasional cleanup could be implemented as follows:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID2EABABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID2EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID2EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
{
    <span class="highlight-keyword">var</span> cc = <span class="highlight-keyword">new</span> CondensedCollection&lt;<span class="highlight-keyword">string</span>&gt;(comparer: StringComparer.Ordinal);
    cc.InternedValueReclaimable += HandleInternedValueReclaimable;   
}

<span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> HandleInternedValueReclaimable(<span class="highlight-keyword">object</span> sender, InternReclaimableEventArgs e)
{
    <span class="highlight-comment">// Perform cleanup as soon as we have 1000 unused strings in our intern pool.</span>
    <span class="highlight-comment">// After cleanup completes, those unused values will be eligible for garbage collection.</span>
    <span class="highlight-keyword">if</span> (e.ReclaimableInternsCount &gt; <span class="highlight-number">999</span>)
        e.Cleanup = <span class="highlight-keyword">true</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID2EABABAAA");</script><p>
          The InternedValueReclaimable event will not be fired if the collection has cut over to a non-deduplicated list
        </p></div></div></div><div id="pageFooter" class="pageFooter"><p>Copyright 2016-2017 Mark Waterman</p></div></body></html>