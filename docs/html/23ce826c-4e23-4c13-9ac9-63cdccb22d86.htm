<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Cutover</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Cutover" /><meta name="Microsoft.Help.Id" content="23ce826c-4e23-4c13-9ac9-63cdccb22d86" /><meta name="Description" content="Register a &quot;cutover&quot; predicate in the T:Condensed.CondensedCollection`1's constructor to revert to non-deduplicated list behavior if it turns out that your collection's population has too many unique values." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Condesed Collection Library for .NET<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="a2dd277a-ec2e-4f4b-a42d-e31f23b94bdd.htm" title="Condesed Collection Library for .NET" tocid="roottoc">Condesed Collection Library for .NET</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="a2dd277a-ec2e-4f4b-a42d-e31f23b94bdd.htm" title="Welcome" tocid="a2dd277a-ec2e-4f4b-a42d-e31f23b94bdd">Welcome</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6326cb27-4108-4317-ae04-e67a8cb4738d.htm" title="Version History" tocid="6326cb27-4108-4317-ae04-e67a8cb4738d">Version History</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="12336e43-b0f4-46fb-a17b-c640871bddab.htm" title="Immutability Overview" tocid="12336e43-b0f4-46fb-a17b-c640871bddab">Immutability Overview</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="88ffb368-39bd-430b-bd09-0800d2f14dbf.htm" title="LINQ Operators" tocid="88ffb368-39bd-430b-bd09-0800d2f14dbf">LINQ Operators</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="23ce826c-4e23-4c13-9ac9-63cdccb22d86.htm" title="Cutover Overview" tocid="23ce826c-4e23-4c13-9ac9-63cdccb22d86">Cutover Overview</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="606626e5-fb28-47c5-939f-a87c14d4f99a.htm" title="Reclamation and Cleanup" tocid="606626e5-fb28-47c5-939f-a87c14d4f99a">Reclamation and Cleanup</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="4e8c0308-b111-44cc-aa69-99f3a651f306.htm" title="Equality Overview" tocid="4e8c0308-b111-44cc-aa69-99f3a651f306">Equality Overview</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="6c8df980-bdc2-46d6-b712-f2f740467dd9.htm" title="License" tocid="6c8df980-bdc2-46d6-b712-f2f740467dd9">License</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="48635bf0-eed3-4978-e228-386eea4ad6d1.htm" title="API Reference" tocid="48635bf0-eed3-4978-e228-386eea4ad6d1">API Reference</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>Cutover</h1></td></tr></table><span class="introStyle"></span> <p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[This is preliminary documentation and is subject to change.]</p><div class="introduction"><ul><li><p>
            Register a "cutover" predicate in the <a href="567ca794-b467-8736-0b20-caacc958e8a9.htm">CondensedCollection</a>'s constructor to revert to non-deduplicated list behavior if it turns out that your collection's population has too many unique values.
          </p></li><li><p>
            The Condensed Library provides <a href="#StandardPredicates">standard cutover predicates</a> for common types.
          </p></li><li><p>
            By default, the CondensedCollection does not perform cutover.
          </p></li></ul></div><div class="collapsibleAreaRegion" id="Section1"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Background</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          A <a href="567ca794-b467-8736-0b20-caacc958e8a9.htm">CondensedCollection</a> creates significant overhead for each unique item in its intern pool (somewhere in the 70-80 byte range), plus an additional copy/reference of each interned value in the collection's internal lookup table. This high overhead is typically amortized if you're working with a very large collection that has a lot of repeated elements. But too many unique values will cause your memory usage to skyrocket.
        </p><p>
          In short, if you expect your collection to always have a lot of unique values, don't use a CondensedCollection--just use a normal List&lt;T&gt; or some other appropriate collection.
        </p><p>
          However, there may be situations when your app doesn't know anything about its incoming workload, but you want to take advantage of a CondensedCollection's behavior as a nice-to-have optimization if the elements happen to be sufficiently repetitive. In this case, registering a cutover callback can give you the flexibility you need.
        </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Registering a Cutover Callback</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          A cutover callback is a user-supplied delegate that's occasionally called by a CondensedCollection as items are added/inserted/updated. Statistics are provided to your callback, and if you decide that the population is too diverse, the collection stops performing its internal deduplication and starts storing your objects like an ordinary list.
        </p><p>
          In the simplest case, say you're using a CondensedCollection to store Int32 values. A reasonable cutover predicate would look like this:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAEACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAEACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAEACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> cutover = <span class="highlight-keyword">new</span> Predicate&lt;CondensedStats&gt;(<span class="highlight-keyword">delegate</span>(CondensedStats stats)
{
    <span class="highlight-comment">// Return true to make a CondensedCollection stop performing deduplication.</span>
    <span class="highlight-keyword">if</span> (stats.UniqueCount &gt; <span class="highlight-keyword">ushort</span>.MaxValue)
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    <span class="highlight-keyword">else</span>
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
});

<span class="highlight-comment">// Provide the cutover predicate to the CondensedCollection:</span>
<span class="highlight-keyword">var</span> cc = <span class="highlight-keyword">new</span> CondensedCollection&lt;<span class="highlight-keyword">int</span>&gt;(cutoverPredicate: cutover);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAEACAAA");</script><p>
          ...the predicate above decides to stop performing deduplication if the collection exceeds 65,536 unique values (that's the number of unique values that will fit in the collection's internal 2-byte wide index--after that, the collection would start using a 4-byte index to reference your interned values, which is counterproductive because you're only storing a 4-byte type).
        </p><p>
          More elaborate cutover rules may be provided to suit the needs of your application or the size of your type. For example, you may not want to consider cutting over until your collection has at least one million elements to examine, at which point you choose to cutover if the ratio of elements to unique values isn't high enough:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> cutover = <span class="highlight-keyword">new</span> Predicate&lt;CondensedStats&gt;(<span class="highlight-keyword">delegate</span> (CondensedStats stats)
{
    <span class="highlight-comment">// Don't consider stopping deduplication until we have</span>
    <span class="highlight-comment">// at least 1 million elements in the population to look at:</span>
    <span class="highlight-keyword">if</span> (stats.Count &lt; <span class="highlight-number">1000000</span>)
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;

    <span class="highlight-comment">// Stop deduplication if we get less than 4 elements</span>
    <span class="highlight-comment">// in the collection for every unique value.</span>
    <span class="highlight-keyword">if</span> ((<span class="highlight-keyword">double</span>)stats.Count / stats.UniqueCount &lt; <span class="highlight-number">4</span> )
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    <span class="highlight-keyword">else</span>
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
});

<span class="highlight-comment">// Provide the cutover predicate to the CondensedCollection:</span>
<span class="highlight-keyword">var</span> cc = <span class="highlight-keyword">new</span> CondensedCollection&lt;<span class="highlight-keyword">string</span>&gt;(cutoverPredicate: cutover, 
                                         comparer: StringComparer.Ordinal);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABACAAA");</script><p>
          You can determine whether cutover has occurred by using the <a href="bd41c4e6-329f-2208-b310-4095bfb166c9.htm">IndexType</a> property or the <a href="2dcc1db2-5437-5d52-7514-5f6c534deae6.htm">HasCutover</a> property.
        </p></div><div class="collapsibleAreaRegion" id="StandardPredicates"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Standard Cutover Predicates</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          To simplify usage, the Condensed Library offers a set of standard cutover predicates for many common types. These can be found in the <a href="1c73e5d6-e13b-a3a6-5746-c58b2f0f17c7.htm">StandardCutoverPredicates</a> class.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> cc = <span class="highlight-keyword">new</span> CondensedCollection&lt;<span class="highlight-keyword">decimal</span>&gt;(cutoverPredicate: StandardCutoverPredicates.DecimalPredicate);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABABAAA");</script><p>
          These predicates offer reasonable behavior for most common types--for example, the standard predicate for an Int32 type is identical to the first example above. Other predicates for variable-sized types (like strings) are heuristics based on expected usage. Custom predicates should be used if these standard heuristics don't meet your needs or you would like more control over cutover behavior.
        </p></div></div></div><div id="pageFooter" class="pageFooter"><p>Copyright 2016-2017 Mark Waterman</p></div></body></html>